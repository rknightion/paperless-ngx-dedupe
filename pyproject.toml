[project]
name = "paperless-dedupe"
version = "1.0.0"
description = "Advanced document deduplication tool for paperless-ngx with fuzzy matching and web UI"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    { name = "Rob Knight", email = "12484127+rknightion@users.noreply.github.com" }
]
maintainers = [
    { name = "Rob Knight", email = "12484127+rknightion@users.noreply.github.com" }
]
requires-python = ">=3.13"
keywords = [
    "paperless-ngx",
    "document-management",
    "deduplication",
    "fuzzy-matching",
    "minhash",
    "lsh",
    "fastapi",
    "react"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business",
    "Topic :: Text Processing :: Indexing",
    "Framework :: FastAPI",
]
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.31.0",
    "websockets>=12.0",
    "httpx>=0.27.2",
    "sqlalchemy>=2.0.36",
    "alembic>=1.14.0",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",
    "pydantic>=2.10.4",
    "pydantic-settings>=2.7.0",
    "rapidfuzz>=3.10.1",
    "datasketch>=1.6.5",
    "python-multipart>=0.0.12",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "aiofiles>=24.1.0",
    "python-dateutil>=2.8.2",
    "pypaperless>=1.2.1",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "flower>=2.0.0",
    "opentelemetry-distro>=0.57b0",
    "opentelemetry-exporter-otlp>=1.36.0",
    "opentelemetry-instrumentation-asyncio==0.57b0",
    "opentelemetry-instrumentation-dbapi==0.57b0",
    "opentelemetry-instrumentation-logging==0.57b0",
    "opentelemetry-instrumentation-sqlite3==0.57b0",
    "opentelemetry-instrumentation-threading==0.57b0",
    "opentelemetry-instrumentation-urllib==0.57b0",
    "opentelemetry-instrumentation-wsgi==0.57b0",
    "opentelemetry-instrumentation-aiohttp-client==0.57b0",
    "opentelemetry-instrumentation-aiohttp-server==0.57b0",
    "opentelemetry-instrumentation-click==0.57b0",
    "opentelemetry-instrumentation-fastapi==0.57b0",
    "opentelemetry-instrumentation-grpc==0.57b0",
    "opentelemetry-instrumentation-httpx==0.57b0",
    "opentelemetry-instrumentation-requests==0.57b0",
    "opentelemetry-instrumentation-sqlalchemy==0.57b0",
    "opentelemetry-instrumentation-starlette==0.57b0",
    "opentelemetry-instrumentation-system-metrics==0.57b0",
    "opentelemetry-instrumentation-tortoiseorm==0.57b0",
    "opentelemetry-instrumentation-urllib3==0.57b0",
    "ruff>=0.12.10",
    "mypy>=1.17.1",
    "cryptography>=45.0.6",
]

[project.urls]
Homepage = "https://github.com/rknightion/paperless-ngx-dedupe"
Documentation = "https://github.com/rknightion/paperless-ngx-dedupe#readme"
Repository = "https://github.com/rknightion/paperless-ngx-dedupe"
Issues = "https://github.com/rknightion/paperless-ngx-dedupe/issues"
Changelog = "https://github.com/rknightion/paperless-ngx-dedupe/blob/main/CHANGELOG.md"

[project.scripts]
paperless-dedupe = "paperless_dedupe:main"
paperless-dedupe-dev = "dev:main"

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "httpx>=0.28.1",
    "psutil>=7.0.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.3.1",
    "python-semantic-release>=9.8.0",
]

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = false
warn_unreachable = false
strict_optional = false
show_error_codes = true
namespace_packages = true
mypy_path = "src"
check_untyped_defs = true
disallow_untyped_defs = false
disallow_any_generics = false
disallow_untyped_calls = false
# Ignore specific error codes that are not critical
disable_error_code = [
    "valid-type",  # SQLAlchemy Base class issues
    "misc",  # General misc errors
    "abstract",  # Abstract class instantiation
    "attr-defined",  # Dynamic attribute issues
    "union-attr",  # Union type attribute access
    "no-redef",  # Variable redefinition
    "name-defined",  # Name not defined
    "arg-type",  # Argument type issues
    "call-overload",  # Overload issues
    "assignment",  # Type assignment issues
    "return-value",  # Return value type issues
    "index",  # Index type issues
    "operator",  # Operator type issues
    "var-annotated",  # Missing type annotations
    "dict-item",  # Dict type issues
    "call-arg",  # Function call argument issues
]
exclude = [
    "tests/",
    "scripts/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git", ".tox", "dist", "build", "*.egg", "venv"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=paperless_dedupe",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0",
    "-q",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["paperless_dedupe"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "S",
]
ignore = [
    "E501",  # line too long
    "D202",  # no blank lines after function docstring
    "D203",  # one blank line before class
    "D213",  # multi-line docstring summary should start at the second line
    "C901",  # too complex (we'll allow some complexity for now)
    "COM812", "COM819",
    "D100", "D203", "D213", "D300",
    "E111", "E114", "E117",
    "ISC001", "ISC002",
    "Q000", "Q001", "Q002", "Q003",
    "W191",
    # Docstring issues (not critical for CI)
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D415",  # First line should end with punctuation
    "D417",  # Missing argument descriptions in the docstring
    # Security warnings (we control the data)
    "S104",  # Possible binding to all interfaces
    "S301",  # pickle is fine for our use case
    "S110",  # try-except-pass is fine for optional features
    # FastAPI/Depends issues
    "B008",  # Do not perform function call in argument defaults (FastAPI Depends is fine)
    # Lower priority style preferences
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY300",  # Consider moving statements to else blocks
    "TRY002",  # Create custom exceptions
    "TRY301",  # Abstract raise to an inner function
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0913", # Too many arguments
    "PLR0911", # Too many return statements
    "PLC0415", # Import outside top-level (lazy imports)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link in TODO
    "FIX002",  # Line contains TODO
    "ERA001",  # Commented-out code
    "ANN401",  # Use of Any (sometimes necessary)
    # Type checking imports (many false positives)
    "TC001",   # Move application imports to TYPE_CHECKING
    "TC002",   # Move third-party imports to TYPE_CHECKING
    "TC006",   # Quotes in cast expressions
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ALL"]
"scripts/*" = [
    "ALL",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces.
indent-style = "space"

[tool.semantic_release]
branch = "main"
commit_parser = "angular"
commit_message = "chore(release): {version} [skip ci]"
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/paperless_dedupe/__init__.py:__version__"]
changelog_file = "CHANGELOG.md"
build_command = ""
upload_to_release = true
upload_to_pypi = false
