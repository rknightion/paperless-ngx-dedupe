name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ github.event.release.created_at }}
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ github.event.release.created_at }}
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: sbom.spdx.json
        asset_name: sbom.spdx.json
        asset_content_type: application/json

  create-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, including all commits"
          CHANGES=$(git log --pretty=format:"- %s" HEAD)
        else
          echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
          CHANGES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..${{ github.ref_name }})
        fi
        
        # Create release notes
        cat << EOF > release-notes.md
        ## Docker Images
        
        Backend image:
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        \`\`\`
        
        Frontend image:
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}
        \`\`\`
        
        ## What's Changed
        
        $CHANGES
        
        ## Quick Start
        
        \`\`\`bash
        # Download the latest docker-compose.yml
        curl -O https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml
        
        # Start the services
        docker compose up -d
        
        # Access the application
        # Web UI: http://localhost:3000
        # API: http://localhost:8000
        \`\`\`
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ github.ref_name }}
        EOF
    
    - name: Update release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        append_body: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}