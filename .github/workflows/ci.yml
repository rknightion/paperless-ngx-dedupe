name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: paperless
          POSTGRES_PASSWORD: paperless
          POSTGRES_DB: paperless_dedupe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run tests with coverage
      env:
        PAPERLESS_DEDUPE_DATABASE_URL: postgresql://paperless:paperless@localhost:5432/paperless_dedupe_test
        PAPERLESS_DEDUPE_REDIS_URL: redis://localhost:6379/0
        PAPERLESS_DEDUPE_SECRET_KEY: test-secret-key-for-ci
      run: |
        uv run pytest --cov=paperless_dedupe --cov-report=xml --cov-report=term -m "not benchmark" --durations=10
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  benchmark-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    # Only run on main branch or when explicitly requested
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[benchmark]')
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: paperless
          POSTGRES_PASSWORD: paperless
          POSTGRES_DB: paperless_dedupe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run benchmark tests
      env:
        PAPERLESS_DEDUPE_DATABASE_URL: postgresql://paperless:paperless@localhost:5432/paperless_dedupe_test
        PAPERLESS_DEDUPE_REDIS_URL: redis://localhost:6379/0
        PAPERLESS_DEDUPE_SECRET_KEY: test-secret-key-for-ci
      run: |
        uv run pytest tests/benchmarks/ -v --durations=0

  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run type checking
      working-directory: frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint
    
    - name: Check formatting
      working-directory: frontend
      run: npm run format:check
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: backend
        push: false
        tags: paperless-dedupe:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: frontend
        push: false
        tags: paperless-dedupe-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner on repo
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      # Only upload SARIF for non-fork PRs and pushes (has permissions)
      if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
      with:
        sarif_file: 'trivy-results.sarif'